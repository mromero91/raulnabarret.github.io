
/* Controltag Loader for Vox Media */
(function(){
  var debugging = /kxdebug/.test(location);
  var log = function() {
    // It's a flag, so if it's there, then it means debug.
    debugging && window.console && console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = document.createElement('script');
    node.async = true;  // This is just to be friendly.
    node.src = url;

    // Connect to both in case we're in older IE.
    node.onload = node.onreadystatechange = function() {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  // Mark the callback, so we don't load it twice on accident.
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  // ControlTag simply crashes when opening a website from Twitter browser on
  // iOS, temporarily disable CT when Twitter for iPhone is detected until they
  // fix this (works fine with other twitter client though)
  if (/Twitter for iPhone/.test(window.navigator.userAgent || '')) return;

  var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "<script>\r\n(function(){\r\n        var kuid = Krux('get', 'user');\r\n        var prefix = location.protocol;\r\n        if (kuid) {\r\n           var dxu_url = '//i.w55c.net/ping_match.gif?st=Krux&rurl=' + prefix + '//beacon.krxd.net/usermatch.gif?partner=dataxu&uid=_wfivefivec_';\r\n           var i = new Image();\r\n           i.src = dxu_url;\r\n        }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "asap", "method": "document", "type": "publisher", "id": 44748, "name": "DataXu user match"}, {"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "internal": 1, "template_replacement": 1, "execution_results": null, "tier": 1, "library_tag_config": {}, "content_type": "html", "timing": "onload", "method": "document", "type": "library", "id": 31271, "name": "Krux Track Social"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 6, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 31036, "name": "Technographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 14, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 31037, "name": "Krux Geographic Data provider tag"}, {"content": "<script>\r\n(function(){\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n           var qcast_url = '//pixel.quantserve.com/pixel/p-j_f_9hh7_PWUw.gif?idmatch=0';\r\n           var i = new Image();\r\n           i.src = qcast_url;\r\n        }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 106, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 73354, "name": "Quantcast S2S provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 80, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 64921, "name": "Nielsen - Precision Marketing (via Exelate) provid"}, {"content": "<script>\r\n// Blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 19, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 64922, "name": "Nielsen Consumer Activation (via Exelate) provider"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 79, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 73375, "name": "Quantcast (Vox) provider tag"}, {"content": "<img src=\"//adadvisor.net/adscores/g.js?sid=9212244187&_kdpid=2111c0af-fc3a-446f-ab07-63aa74fbde8e\" />", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 22, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 33472, "name": "AdAdvisor S2S provider tag"}, {"content": "<script>\r\n\r\n(function () {\r\n_ml = window._ml || {};\r\n_ml.pub = '748';\r\n_ml.redirect = '//beacon.krxd.net/usermatch.gif?partner=madisonlogic&partner_uid=[PersonID]';\r\nvar s = document.getElementsByTagName('script')[0], cd = new Date(), mltag = document.createElement('script');\r\nmltag.type = 'text/javascript'; mltag.async = true;\r\nmltag.src = '//ml314.com/tag.aspx?' + cd.getDate() + cd.getMonth() + cd.getFullYear();\r\ns.parentNode.insertBefore(mltag, s);\r\n})();\r\n\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 47, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 33473, "name": "Madison Logic provider tag"}, {"content": "<script>\r\n(function(){\r\n    var prefix = window.location.protocol == 'https:' ? 'https:' : 'http:';\r\n    var url = prefix + '//kr.ixiaa.com/C726AB29-0470-440B-B8D2-D552CED3A3DC/a.gif';\r\n    new Image().src = url;\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 28, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 33474, "name": "IXI Digital Open Market provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n      var liveramp_url = 'https://idsync.rlcdn.com/379708.gif?partner_uid=' + kuid;\r\n      var i = new Image();\r\n      i.src = liveramp_url;      \r\n  }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 21, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 31211, "name": "Acxiom S2S provider tag"}, {"content": "<script>\r\n    (function() {\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n            var kurl_params = encodeURIComponent(\"_kuid=\" + kuid + \"&_kdpid=2dd640a6-6ebd-4d4f-af30-af8baa441a0d&dlxid=<na_id>&dlxdata=<na_da>\");\r\n            var kurl = prefix + \"//beacon.krxd.net/data.gif?\" + kurl_params;\r\n            var dlx_url = '//r.nexac.com/e/getdata.xgi?dt=br&pkey=gpwn29rvapq62&ru=' + kurl;\r\n            var i = new Image();\r\n            i.src = dlx_url;\r\n        }\r\n    })();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 8, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "data provider", "id": 31212, "name": "DataLogix provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//loadm.exelator.com/load\",\r\n      data: {\r\n          _kdpid: 'e4942ff0-4070-4896-a7ef-e6a5a30ce9f9',\r\n          buid: kuid,\r\n          p: '204',\r\n          g: '270',\r\n          j: '0'\r\n      }});\r\n  }\r\n  })();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 11, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 31214, "name": "eXelate Media provider tag"}, {"content": "", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "id": 66841, "name": "TubeMogul Custom Connect"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid && typeof kuid != 'undefined') {\r\n      var prefix = location.protocol == 'https:' ? \"https:\" :\"http:\";\r\n      var r_url = prefix + '//cm.g.doubleclick.net/pixel'\r\n      var kurl = prefix + '//apiservices.krxd.net/um?partner=google&r=' + r_url;\r\n      var i = new Image();\r\n      i.src = kurl;\r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 31283, "name": "Google User Matching"}, {"content": "<script>\r\n(function(){\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n            var kurl = prefix + '//beacon.krxd.net/usermatch.gif?adnxs_uid=$UID';\r\n            var appnexus_url = '//ib.adnxs.com/getuid?' + kurl\r\n            var i = new Image();\r\n            i.src = appnexus_url;\r\n        }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 66110, "name": "AppNexus Custom Connect"}, {"content": "<script type=\"text/javascript\">\r\n(function() {\r\n    (new Image()).src = '//sync.tidaltv.com/genericusersync.ashx?dpid=395';\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 69185, "name": "Videology Custom Connect"}, {"content": "<script>\r\n(function(){\r\n  if (window.Krux) {\r\n    var kuid = window.Krux('get', 'user');\r\n    if (kuid && typeof kuid != 'undefined') {\r\n       var rubicon_url = '//tap.rubiconproject.com/oz/feeds/krux/tokens?afu=' + kuid;\r\n       var i = new Image();\r\n       i.src = rubicon_url;\r\n    }\r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 34405, "name": "Rubicon User Match"}, {"content": "<script>\r\n(function(){\r\n        var kuid = Krux('get', 'user');\r\n        var prefix = window.location.protocol == 'https:' ? 'https:' : 'http:';\r\n        if (kuid) {\r\n           var url = '//servedby.flashtalking.com/map/?key=ad919e4f211cr5452615&url='\r\n                     + prefix\r\n                     + '//beacon.krxd.net/usermatch.gif?partner=flashtalking&partner_uid=[%FT_GUID%]';\r\n           (new Image()).src = url;\r\n        }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 67206, "name": "Flashtalking Usermatch Pixel"}, {"content": "<script>\r\n(function()\r\n{ var i = new Image(); i.src = '//match.adsrvr.org/track/cmf/generic?ttd_pid=krux&ttd_tpi=1'; }\r\n)();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 68041, "name": "TradeDesk Custom Connect"}, {"content": "<script>\r\n    (function() {\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n            var kurl_params = encodeURIComponent(\"_kuid=\" + kuid + \"&_kdpid=d7158cb7-a851-4e3c-b7ab-cc9e815b2399&dlxid=<na_id>&dlxdata=<na_da>\");\r\n            var kurl = prefix + \"//beacon.krxd.net/data.gif?\" + kurl_params;\r\n            var dlx_url = '//r.nexac.com/e/getdata.xgi?dt=br&pkey=gwjn34gwjnh86&ru=' + kurl;\r\n            var i = new Image();\r\n            i.src = dlx_url;\r\n        }\r\n    })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 64972, "name": "Datalogix Custom User Sync"}, {"content": "<script type=\"text/javascript\">\r\n(function() {\r\n    (new Image()).src = '//adadvisor.net/adscores/g.js?sid=9212244187&_kdpid=2111c0af-fc3a-446f-ab07-63aa74fbde8e';\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 68055, "name": "Neustar Custom Connect"}, {"content": "<script>\r\n    // Using Meta keywords to produce page attribute keywords\r\n    Krux('scrape', {\r\n        \"page_attr_keywords\": {\r\n            meta_name: \"keywords\"\r\n        }\r\n    });\r\n\r\n    // Using UrlPath attributes\r\n    Krux('scrape', {\r\n        \"page_attr_url_path_1\": {\r\n            url_path: \"1\"\r\n        }\r\n    });\r\n    Krux('scrape', {\r\n        \"page_attr_url_path_2\": {\r\n            url_path: \"2\"\r\n        }\r\n    });\r\n    Krux('scrape', {\r\n        \"page_attr_url_path_3\": {\r\n            url_path: \"3\"\r\n        }\r\n    });\r\n\r\n\r\n    (function() {\r\n        if (window.KxVox) {\r\n            var x = KxVox;\r\n            var s = Krux('get', 'site');\r\n\r\n            Krux('set', 'page_attr_' + s + '_site', s);\r\n            Krux('set', 'page_attr_' + s + '_affiliation', x.affiliation);\r\n            Krux('set', 'page_attr_' + s + '_page_type', x.page_type);\r\n            Krux('set', 'page_attr_' + s + '_entry_group', x.entry_group);\r\n            Krux('set', 'page_attr_' + s + '_keywords', x.keywords);\r\n\r\n            // Umbel Scraper\r\n            if (document.cookie.match('umbel_segment_ids')) {\r\n\r\n                Krux('scrape', {\r\n                    'user_attr_umbel_ids': {\r\n                        cookie: 'umbel_segment_ids'\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 31223, "name": "Krux Data Transfer Code"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n      var liveramp_url = 'https://idsync.rlcdn.com/379708.gif?partner_uid=' + kuid;\r\n      var i = new Image();\r\n      i.src = liveramp_url;     \r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 5, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 64867, "name": "Test LiveRamp User Matching"}, {"content": "<script>\r\n(function(){\r\n    var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = 'https:';\r\n            var rurl = prefix + '//cms.analytics.yahoo.com/cms?partner_id=KRUX';\r\n            var i = new Image();\r\n            i.src = rurl;\r\n        }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 5, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "publisher", "id": 64868, "name": "Test Yahoo! DataX"}], "buckets": [], "publisher": {"uuid": "36b99e73-5c79-40db-9954-69f256f24981", "id": 12226, "name": "Vox Media"}, "controltag_options": {"async": "true", "render": true}, "site": {"id": 17445, "name": "theverge"}, "prioritized_segments": ["pdhi7qquo", "pdhi7qxkh", "pmf67vgia", "pmiovez8o", "p4th56u1i", "pg7d2dvtp", "pg7meyaem", "pirn8kdmj", "pco61qpc1", "okw0xl9qu", "okw0zetxu", "okw0032np", "pcpg46la0", "o1jt4o0qz", "pclv26l3e", "o3bjx5j3v", "okw0sioxx", "o8l6muy0r", "o8mazgwdl", "pb8xoi4c4", "okw0t2apu", "oyk85i4a5", "pa5irz5py", "o33kgfsh0", "okw0qtnt9", "okw0vu5sh", "o3z6vfnln", "o9hn0o74f", "p31h76shg", "p2qphr82q", "os29b1jpl", "o3bienvdd", "pn1hd4skj", "pdswgs9bj", "o8ijd8vty", "o231i5ghx", "ph0dyng0f", "o7an4ujcd", "ph0d67wyz", "o2f8rf4ro", "oz89m4j14", "o23gubhnt", "oone1km09", "o0pfh8uxt", "o2f8chmsc", "pco7eql6h", "o4n059pge", "oj5n3lk7w", "o8l6ogmbj", "o1krdvobz", "p02zpdfwr", "p0mwjbpae", "prdayn0sp", "ovaivwn7a", "oz5cd80ww", "p2qmjr8a2", "pm98bph11", "ozk52yvst", "p6c38p6yt", "p1u2hvdhm", "p4xqtu7px", "p4xdjo300", "oy8y6kw3s", "o038d2ho5", "o1vucggjf", "pkrl645vx", "ouh40809o", "px6nr1b7n", "pya7gaq3j", "pll96sdos", "o4n01uqrn", "o6uykig31", "pt7tjppyh", "o038m90fv", "orrkjfswt", "o038t7cij", "ovhuyci3k", "p36helyma", "pbh8e7vp0", "oyortgg4k", "pdsoka7rn", "prc6hxs84", "pdsgp7w56", "pd0r6pcaa", "p29jeppdy", "pd0r8p97g", "pd0sbb4l4", "pd0ssf5i6", "p1ys8qvux", "pd0su3np2", "pd0sxq0go", "pd0utfawi", "pd0uwh9vg", "pd0uzawja", "pd0u150tt", "pd0u363rc", "pd0u63uri", "pd8iwuuaf", "pej5dww1b", "pfssbl41o", "p1x7d8fcc", "pfstrz5mg", "pf4w9hfbq", "pxyntcpbb", "okwy7173i", "pg3h74tgm", "oj5n3ilj2", "pg8gkgakk", "psgrj2e7h", "ph29kayos", "ph29ueosg", "ph296uraq", "ph3abqwo0", "ph3aidncu", "pej49t8k0", "ph3anuq86", "pd41gll1r", "pjjba5cm9", "pjjbf0yev", "pj62piu33", "pdgwgntzk", "pkuh6x5cd", "pkvogmrqu", "pk3duvdt8", "pk6hp8j98", "pk6h2dex3", "plmne8pqy", "plt4lnyia", "plyvcf3nk", "plyvewe9b", "plyvgp715", "plyvi94dz", "plyvmfvju", "plyvpm5k1", "pjm7b3rjn", "o8qkml85j", "pmea41hxs", "pmdvks92l", "pmeqh2ww3", "phn1hb2h7", "pmewcg0bp", "pme6uqfoe", "pmfaju91j", "pmfar3n0q", "pmfavweq5", "pmfay32xo", "pmfbkx9se", "pmfbo9qdm", "pmfbrnd4y", "pmfb0ewgz", "pmfb5lr0j", "pmfb9d3c6", "pmfcldyql", "pmfcwsme3", "pmhtacuc6", "pmhtd6069", "pmhtgz5nb", "phrefbdku", "pm627jaqk", "pm63d1jpy", "pm63y7j1l", "pkqle7kww", "pf8vevyaj", "pje9fhqt6", "pd5cin55k", "phrd7quj2", "pbpim0ebo", "ok78foury", "pnaapqooe", "pm92hjepa", "pm998m3f0", "pm913bevf", "pm996i2a0", "pm90r3u5d", "pm96p04hz", "pm99qvj9b", "pm946taal", "pm99fcblg", "pm94rdc1k", "pm98oznmq", "pnamj416o", "pndvge6wn", "pnduuy0i6", "pndt2ybwb", "pndsy4dzb", "o72fvcc59", "pwfekyqx4", "pke0bwavn", "popxx7yqn", "poycqqp48", "pphx29gp0", "qbbgqvczz", "ozhnclufx", "psgo9u45g", "ptb28d4pn", "ptb3co917", "ptb4pecbj", "ptb4sw7pt", "ptb7r054y", "ptb7vidn5", "purnbtg9q", "pwnchxal7", "pw6wo8hka", "pw6xf6ceo", "pvj9drx0p", "psgskzkvg", "pyq3ldgju", "pyq3wanpe", "pyq4sxs5p", "pyq48okog", "pyq5m3zak", "pyq7hkaqz", "pyuwcgnwm", "pyydi8psl", "pzmjq0kqx", "pz92mmcpo", "p0ab5qj36", "p0m7sj4m0", "p0ydu6xud", "p06bmcf2a", "p2t83ym2r", "p2umev833", "p29dr8229", "pdepokohp", "p3af12gwx", "p3avyaqai", "p3msypdcd", "p3ms0rsor", "p31ibd0uq", "p36vjdtsc", "p37dfu9f7", "p37e7lnz8", "p37e9n469", "p4dfdzwil", "pirzj315l", "p4drz0887", "p4elleslw", "p4eopmdt1", "pmdwf0q0g", "p4dszz7q4", "p4sx3a41d", "phzenjwxn", "p4yjabf4h", "p46lcpu0w", "p5pl2ghqn", "p5p7byjfs", "p5tdm9qqf", "p5vdey5l5", "p6gzhi9kp", "p6gzla0wd", "p6hesrl7u", "p68caxpll", "ok8mxuzgg", "p7k1tni9v", "p706yb1d9", "p74580i5c", "p8pfn87yd", "p8pfpnmoj", "p8pmo055k", "p8p1qrmsq", "p8p3hq499", "p8p30jf2u", "p8p5bteq9", "p8rum56l3", "p8r9stzmv", "p8ugnv5ef", "p8ui9kqph", "p8ukvlh8t", "p8z7kfcxx", "qazpclylc", "qa8izkpvy", "qbvcpte3m", "qb07e3s53", "qb2z18an6", "o95k54dkh", "qcn4pz8t3", "pdeo8zogl", "qcvckftem", "pdeqkkx12", "ok8krldt7", "qdm2dwpz5", "p4gv9p0ix", "pin64hkrr", "pp51a5q08"], "realtime_segments": [], "dnt": null, "params": {"connector_host": "connector.krxd.net", "first_party_uid": false, "control_tag_load_sync": "false", "userData_host": "cdn.krxd.net", "disable_http_compression": false, "remove_kxhead": true, "supertag_requires_approval": false, "control_tag_namespace": null, "control_tag_stats_prefix": null, "optimize_realtime_segments": false, "beacon_host": "beacon.krxd.net", "control_tag_pixel_throttle": "100", "store_realtime_segments": false, "user_id_cookie": null, "max_segments": "25", "no_pii": 0, "recommend": false, "revenue_optimization": false, "context_terms": "false", "jslog_host": "jslog.krxd.net", "buckets": "", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "fingerprint": false, "config_source": 1, "control_tag_version": "stable", "capture_js_errors": "true", "datatag_version": "3", "dfp_premium": "true", "userdata_host": "cdn.krxd.net", "target_fingerprint": false}, "services": {"event": "//beacon.krxd.net/event.gif", "impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "log": "//jslog.krxd.net/jslog.gif", "optout": "//beacon.krxd.net/optout_check", "um": "//apiservices.krxd.net/um", "pixel": "//beacon.krxd.net/pixel.gif", "contentConnector": "//connector.krxd.net/content_connector/", "is_optout": "//beacon.krxd.net/optout_check", "set_optin": "//apiservices.krxd.net/consumer/optin", "social": "//beacon.krxd.net/social.gif", "set_optout": "//apiservices.krxd.net/consumer/optout", "userData": "//cdn.krxd.net/userdata/get", "data": "//beacon.krxd.net/data.gif", "userdata": "//cdn.krxd.net/userdata/get", "addSegment": "//cdn.krxd.net/userdata/add"}, "geo": {}, "segments": [], "confid": "JImcjrMY"};

  // Wrap in a function and comment, then toString the func and replace
  // everything that's not the beginning or end of a JSON object, so we get a
  // string that's either empty or JSON.
  var esiGeo = String(function(){/*
    <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = window.JSON.parse(esiGeo);
    } catch (__) {
      // Couldn't parse, so setting to {}
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }

  
  
  

  load('//cdn.krxd.net/ctjs/controltag.js.e0ce6829d34e23edb3c90f3615dd81e0', function() {
    
    
    log('Loading krux configuration.');

    Krux('config', config);

    
  });
})();
